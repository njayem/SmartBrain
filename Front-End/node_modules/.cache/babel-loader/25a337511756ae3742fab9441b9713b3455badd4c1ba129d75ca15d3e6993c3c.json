{"ast":null,"code":"var _jsxFileName = \"/Users/nmufti/Desktop/REACT/SmartBrain/src/App.js\";\nimport React, { Component } from \"react\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport Logo from \"./components/Logo/Logo\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\";\nimport ParticlesBg from \"particles-bg\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nclass App extends Component {\n  //We need to keep track of the input value in the input box\n  //So we need to create a state using constructor\n  constructor() {\n    super();\n    // We need to create a function that will listen to the input change\n    // and update the state\n    this.onInputChange = event => {\n      console.log(event.target.value);\n    };\n    this.onButtonSubmit = () => {\n      console.log(\"click\");\n\n      ///////////////////////////////////////////////////////////////////////////////////////////////////\n      // In this section, we set the user authentication, user and app ID, model details, and the URL\n      // of the image we want as an input. Change these strings to run your own example.\n      //////////////////////////////////////////////////////////////////////////////////////////////////\n\n      // Your PAT (Personal Access Token) can be found in the portal under Authentification\n      const PAT = \"YOUR_PAT_HERE\";\n      // Specify the correct user_id/app_id pairings\n      // Since you're making inferences outside your app's scope\n      const USER_ID = \"clarifai\";\n      const APP_ID = \"main\";\n      // Change these to whatever model and image URL you want to use\n      const MODEL_ID = \"face-detection\";\n      const MODEL_VERSION_ID = \"6dc7e46bc9124c5c8824be4822abe105\";\n      const IMAGE_URL = \"https://samples.clarifai.com/metro-north.jpg\";\n\n      ///////////////////////////////////////////////////////////////////////////////////\n      // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n      ///////////////////////////////////////////////////////////////////////////////////\n\n      const raw = JSON.stringify({\n        user_app_id: {\n          user_id: USER_ID,\n          app_id: APP_ID\n        },\n        inputs: [{\n          data: {\n            image: {\n              url: IMAGE_URL\n            }\n          }\n        }]\n      });\n      const requestOptions = {\n        method: \"POST\",\n        headers: {\n          Accept: \"application/json\",\n          Authorization: \"Key \" + PAT\n        },\n        body: raw\n      };\n\n      // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n      // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n      // this will default to the latest version_id\n\n      fetch(\"https://api.clarifai.com/v2/models/\" + MODEL_ID + \"/versions/\" + MODEL_VERSION_ID + \"/outputs\", requestOptions).then(response => response.text()).then(result => console.log(result)).catch(error => console.log(\"error\", error));\n    };\n    this.state = {\n      input: \"\"\n    };\n  }\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(ParticlesBg, {\n        color: \"#ffffff\",\n        type: \"cobweb\",\n        bg: true,\n        num: 300\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 94,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onButtonSubmit: this.onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 4\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Navigation","Logo","ImageLinkForm","Rank","ParticlesBg","jsxDEV","_jsxDEV","App","constructor","onInputChange","event","console","log","target","value","onButtonSubmit","PAT","USER_ID","APP_ID","MODEL_ID","MODEL_VERSION_ID","IMAGE_URL","raw","JSON","stringify","user_app_id","user_id","app_id","inputs","data","image","url","requestOptions","method","headers","Accept","Authorization","body","fetch","then","response","text","result","catch","error","state","input","render","className","children","color","type","bg","num","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/nmufti/Desktop/REACT/SmartBrain/src/App.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport Logo from \"./components/Logo/Logo\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\";\nimport ParticlesBg from \"particles-bg\";\nimport \"./App.css\";\n\nclass App extends Component {\n\t//We need to keep track of the input value in the input box\n\t//So we need to create a state using constructor\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tinput: \"\",\n\t\t};\n\t}\n\n\t// We need to create a function that will listen to the input change\n\t// and update the state\n\tonInputChange = (event) => {\n\t\tconsole.log(event.target.value);\n\t};\n\n\tonButtonSubmit = () => {\n\t\tconsole.log(\"click\");\n\n\t\t///////////////////////////////////////////////////////////////////////////////////////////////////\n\t\t// In this section, we set the user authentication, user and app ID, model details, and the URL\n\t\t// of the image we want as an input. Change these strings to run your own example.\n\t\t//////////////////////////////////////////////////////////////////////////////////////////////////\n\n\t\t// Your PAT (Personal Access Token) can be found in the portal under Authentification\n\t\tconst PAT = \"YOUR_PAT_HERE\";\n\t\t// Specify the correct user_id/app_id pairings\n\t\t// Since you're making inferences outside your app's scope\n\t\tconst USER_ID = \"clarifai\";\n\t\tconst APP_ID = \"main\";\n\t\t// Change these to whatever model and image URL you want to use\n\t\tconst MODEL_ID = \"face-detection\";\n\t\tconst MODEL_VERSION_ID = \"6dc7e46bc9124c5c8824be4822abe105\";\n\t\tconst IMAGE_URL = \"https://samples.clarifai.com/metro-north.jpg\";\n\n\t\t///////////////////////////////////////////////////////////////////////////////////\n\t\t// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n\t\t///////////////////////////////////////////////////////////////////////////////////\n\n\t\tconst raw = JSON.stringify({\n\t\t\tuser_app_id: {\n\t\t\t\tuser_id: USER_ID,\n\t\t\t\tapp_id: APP_ID,\n\t\t\t},\n\t\t\tinputs: [\n\t\t\t\t{\n\t\t\t\t\tdata: {\n\t\t\t\t\t\timage: {\n\t\t\t\t\t\t\turl: IMAGE_URL,\n\t\t\t\t\t\t},\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t],\n\t\t});\n\n\t\tconst requestOptions = {\n\t\t\tmethod: \"POST\",\n\t\t\theaders: {\n\t\t\t\tAccept: \"application/json\",\n\t\t\t\tAuthorization: \"Key \" + PAT,\n\t\t\t},\n\t\t\tbody: raw,\n\t\t};\n\n\t\t// NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n\t\t// https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n\t\t// this will default to the latest version_id\n\n\t\tfetch(\n\t\t\t\"https://api.clarifai.com/v2/models/\" +\n\t\t\t\tMODEL_ID +\n\t\t\t\t\"/versions/\" +\n\t\t\t\tMODEL_VERSION_ID +\n\t\t\t\t\"/outputs\",\n\t\t\trequestOptions\n\t\t)\n\t\t\t.then((response) => response.text())\n\t\t\t.then((result) => console.log(result))\n\t\t\t.catch((error) => console.log(\"error\", error));\n\t};\n\n\trender() {\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<ParticlesBg color=\"#ffffff\" type=\"cobweb\" bg={true} num={300} />\n\t\t\t\t<Navigation />\n\t\t\t\t<Logo />\n\t\t\t\t<Rank />\n\t\t\t\t<ImageLinkForm\n\t\t\t\t\tonInputChange={this.onInputChange}\n\t\t\t\t\tonButtonSubmit={this.onButtonSubmit}\n\t\t\t\t/>\n\t\t\t\t{/* <FaceRecognition /> */}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}