{"ast":null,"code":"var _jsxFileName = \"/Users/nmufti/Desktop/REACT/SmartBrain/Front-End/src/App.js\";\nimport React, { Component } from \"react\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport Logo from \"./components/Logo/Logo\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\nimport Signin from \"./components/Signin/Signin\";\nimport Register from \"./components/Register/Register\";\nimport ParticlesBg from \"particles-bg\";\n// import Clarifai from \"clarifai\";\nimport \"./App.css\";\n\n// const app = new Clarifai.App({\n// \tapiKey: \"b2977460c0b442b8a027080ec68659b2\",\n// });\n\n//* ******************************************************* *//\n// CLARIFY API CALL //\n//* ******************************************************* *//\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, and the URL\n// of the image we want as an input. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst returnClarifaiJSONRequest = imageUrl => {\n  // Your PAT (Personal Access Token) can be found in the portal under Authentification\n  const PAT = \"69dad3ab303f4fff82f864adb6a6cf60\";\n  // Specify the correct user_id/app_id pairings\n  // Since you're making inferences outside your app's scope\n  const USER_ID = \"njayem\";\n  const APP_ID = \"SmartBrain\";\n  // Change these to whatever model and image URL you want to use\n  const IMAGE_URL = imageUrl;\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const raw = JSON.stringify({\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID\n    },\n    inputs: [{\n      data: {\n        image: {\n          url: IMAGE_URL\n        }\n      }\n    }]\n  });\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: \"Key \" + PAT\n    },\n    body: raw\n  };\n  return requestOptions;\n};\n//* ******************************************************* *//\n//* ******************************************************* *//\n\n// CREATE AN INITIAL STATE FOR THE APP\nconst initialState = {\n  input: \"\",\n  imageUrl: \"\",\n  box: {},\n  route: \"signin\",\n  isSignedIn: false,\n  user: {\n    id: \"\",\n    name: \"\",\n    email: \"\",\n    entries: 0,\n    joined: \"\"\n  }\n};\nclass App extends Component {\n  //We need to keep track of the input value in the input box\n  //So we need to create a state using constructor\n  constructor() {\n    super();\n    this.loadUser = data => {\n      this.setState({\n        user: {\n          id: data.id,\n          name: data.name,\n          email: data.email,\n          entries: data.entries,\n          joined: data.joined\n        }\n      });\n    };\n    this.calculateFaceLocation = data => {\n      console.log(\"Data\", data);\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      console.log(\"Clarifai Face Location Data:\", clarifaiFace);\n      const image = document.getElementById(\"inputimage\");\n      const width = Number(image.width);\n      console.log(\"width:\", width);\n      const height = Number(image.height);\n      console.log(\"height:\", height);\n      return {\n        left_col: clarifaiFace.left_col * width,\n        top_row: clarifaiFace.top_row * height,\n        right_col: width - clarifaiFace.right_col * width,\n        bottom_row: height - clarifaiFace.bottom_row * height\n      };\n    };\n    // This updates the box state\n    this.displayFaceBox = box => {\n      console.log(\"BOX OBJECT:\", box);\n      this.setState({\n        box: box\n      });\n    };\n    // We need to create a function that will listen to the input change\n    // and update the state\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n    this.onButtonSubmit = () => {\n      console.log(\"click\");\n      this.setState({\n        imageUrl: this.state.input\n      });\n      //console.log(\"the state input is:\", this.state.input);\n\n      fetch(\"https://api.clarifai.com/v2/models/\" + \"face-detection\" + \"/outputs\", returnClarifaiJSONRequest(this.state.input)).then(response => response.json()).then(result => {\n        if (result) {\n          //console.log(\"RESULTTT:\", result);\n          fetch(\"http://localhost:3000/image\", {\n            method: \"put\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          }).then(response => {\n            return response.json();\n          }).then(count => {\n            this.setState(Object.assign(this.state.user, {\n              entries: count\n            }));\n            console.log(\"COUNT:\", count);\n          }).catch(console.log);\n        }\n        this.displayFaceBox(this.calculateFaceLocation(result));\n      }).catch(error => console.log(\"error\", error));\n    };\n    this.onRouteChange = route => {\n      if (route === \"signout\") {\n        this.setState(initialState);\n      } else if (route === \"home\") {\n        this.setState({\n          isSignedIn: true\n        });\n      }\n      this.setState({\n        route: route\n      });\n    };\n    this.state = initialState;\n  }\n  render() {\n    const {\n      imageUrl,\n      box,\n      route,\n      isSignedIn\n    } = this.state;\n    console.log(\"imageUrl:\", imageUrl);\n    console.log(\"box:\", box);\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(ParticlesBg, {\n        color: \"#ffffff\",\n        type: \"cobweb\",\n        bg: true,\n        num: 300\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 186,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {\n        isSignedIn: isSignedIn,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 187,\n        columnNumber: 5\n      }, this), route === \"home\" ? /*#__PURE__*/_jsxDEV(\"div\", {\n        children: [/*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 193,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(Rank, {\n          name: this.state.user.name,\n          entries: this.state.user.entries\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 194,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n          onInputChange: this.onInputChange,\n          onButtonSubmit: this.onButtonSubmit\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 198,\n          columnNumber: 7\n        }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n          imageUrl: imageUrl,\n          box: box\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 202,\n          columnNumber: 7\n        }, this), \" \"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 192,\n        columnNumber: 6\n      }, this) : route === \"signin\" ? /*#__PURE__*/_jsxDEV(Signin, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 205,\n        columnNumber: 6\n      }, this) : /*#__PURE__*/_jsxDEV(Register, {\n        loadUser: this.loadUser,\n        onRouteChange: this.onRouteChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 207,\n        columnNumber: 6\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 185,\n      columnNumber: 4\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Navigation","Logo","ImageLinkForm","Rank","FaceRecognition","Signin","Register","ParticlesBg","jsxDEV","_jsxDEV","returnClarifaiJSONRequest","imageUrl","PAT","USER_ID","APP_ID","IMAGE_URL","raw","JSON","stringify","user_app_id","user_id","app_id","inputs","data","image","url","requestOptions","method","headers","Accept","Authorization","body","initialState","input","box","route","isSignedIn","user","id","name","email","entries","joined","App","constructor","loadUser","setState","calculateFaceLocation","console","log","clarifaiFace","outputs","regions","region_info","bounding_box","document","getElementById","width","Number","height","left_col","top_row","right_col","bottom_row","displayFaceBox","onInputChange","event","target","value","onButtonSubmit","state","fetch","then","response","json","result","count","Object","assign","catch","error","onRouteChange","render","className","children","color","type","bg","num","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/nmufti/Desktop/REACT/SmartBrain/Front-End/src/App.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport Logo from \"./components/Logo/Logo\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\nimport Signin from \"./components/Signin/Signin\";\nimport Register from \"./components/Register/Register\";\nimport ParticlesBg from \"particles-bg\";\n// import Clarifai from \"clarifai\";\nimport \"./App.css\";\n\n// const app = new Clarifai.App({\n// \tapiKey: \"b2977460c0b442b8a027080ec68659b2\",\n// });\n\n//* ******************************************************* *//\n// CLARIFY API CALL //\n//* ******************************************************* *//\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, and the URL\n// of the image we want as an input. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////\nconst returnClarifaiJSONRequest = (imageUrl) => {\n\t// Your PAT (Personal Access Token) can be found in the portal under Authentification\n\tconst PAT = \"69dad3ab303f4fff82f864adb6a6cf60\";\n\t// Specify the correct user_id/app_id pairings\n\t// Since you're making inferences outside your app's scope\n\tconst USER_ID = \"njayem\";\n\tconst APP_ID = \"SmartBrain\";\n\t// Change these to whatever model and image URL you want to use\n\tconst IMAGE_URL = imageUrl;\n\n\t///////////////////////////////////////////////////////////////////////////////////\n\t// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n\t///////////////////////////////////////////////////////////////////////////////////\n\n\tconst raw = JSON.stringify({\n\t\tuser_app_id: {\n\t\t\tuser_id: USER_ID,\n\t\t\tapp_id: APP_ID,\n\t\t},\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tdata: {\n\t\t\t\t\timage: {\n\t\t\t\t\t\turl: IMAGE_URL,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t});\n\n\tconst requestOptions = {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\tAccept: \"application/json\",\n\t\t\tAuthorization: \"Key \" + PAT,\n\t\t},\n\t\tbody: raw,\n\t};\n\treturn requestOptions;\n};\n//* ******************************************************* *//\n//* ******************************************************* *//\n\n// CREATE AN INITIAL STATE FOR THE APP\nconst initialState = {\n\tinput: \"\",\n\timageUrl: \"\",\n\tbox: {},\n\troute: \"signin\",\n\tisSignedIn: false,\n\tuser: {\n\t\tid: \"\",\n\t\tname: \"\",\n\t\temail: \"\",\n\t\tentries: 0,\n\t\tjoined: \"\",\n\t},\n};\n\nclass App extends Component {\n\t//We need to keep track of the input value in the input box\n\t//So we need to create a state using constructor\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = initialState;\n\t}\n\n\tloadUser = (data) => {\n\t\tthis.setState({\n\t\t\tuser: {\n\t\t\t\tid: data.id,\n\t\t\t\tname: data.name,\n\t\t\t\temail: data.email,\n\t\t\t\tentries: data.entries,\n\t\t\t\tjoined: data.joined,\n\t\t\t},\n\t\t});\n\t};\n\n\tcalculateFaceLocation = (data) => {\n\t\tconsole.log(\"Data\", data);\n\t\tconst clarifaiFace =\n\t\t\tdata.outputs[0].data.regions[0].region_info.bounding_box;\n\n\t\tconsole.log(\"Clarifai Face Location Data:\", clarifaiFace);\n\n\t\tconst image = document.getElementById(\"inputimage\");\n\t\tconst width = Number(image.width);\n\t\tconsole.log(\"width:\", width);\n\t\tconst height = Number(image.height);\n\t\tconsole.log(\"height:\", height);\n\n\t\treturn {\n\t\t\tleft_col: clarifaiFace.left_col * width,\n\t\t\ttop_row: clarifaiFace.top_row * height,\n\t\t\tright_col: width - clarifaiFace.right_col * width,\n\t\t\tbottom_row: height - clarifaiFace.bottom_row * height,\n\t\t};\n\t};\n\n\t// This updates the box state\n\tdisplayFaceBox = (box) => {\n\t\tconsole.log(\"BOX OBJECT:\", box);\n\t\tthis.setState({ box: box });\n\t};\n\n\t// We need to create a function that will listen to the input change\n\t// and update the state\n\tonInputChange = (event) => {\n\t\tthis.setState({ input: event.target.value });\n\t};\n\n\tonButtonSubmit = () => {\n\t\tconsole.log(\"click\");\n\t\tthis.setState({ imageUrl: this.state.input });\n\t\t//console.log(\"the state input is:\", this.state.input);\n\n\t\tfetch(\n\t\t\t\"https://api.clarifai.com/v2/models/\" + \"face-detection\" + \"/outputs\",\n\t\t\treturnClarifaiJSONRequest(this.state.input)\n\t\t)\n\t\t\t.then((response) => response.json())\n\t\t\t.then((result) => {\n\t\t\t\tif (result) {\n\t\t\t\t\t//console.log(\"RESULTTT:\", result);\n\t\t\t\t\tfetch(\"http://localhost:3000/image\", {\n\t\t\t\t\t\tmethod: \"put\",\n\t\t\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\tid: this.state.user.id,\n\t\t\t\t\t\t}),\n\t\t\t\t\t})\n\t\t\t\t\t\t.then((response) => {\n\t\t\t\t\t\t\treturn response.json();\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.then((count) => {\n\t\t\t\t\t\t\tthis.setState(Object.assign(this.state.user, { entries: count }));\n\t\t\t\t\t\t\tconsole.log(\"COUNT:\", count);\n\t\t\t\t\t\t})\n\t\t\t\t\t\t.catch(console.log);\n\t\t\t\t}\n\t\t\t\tthis.displayFaceBox(this.calculateFaceLocation(result));\n\t\t\t})\n\t\t\t.catch((error) => console.log(\"error\", error));\n\t};\n\n\tonRouteChange = (route) => {\n\t\tif (route === \"signout\") {\n\t\t\tthis.setState(initialState);\n\t\t} else if (route === \"home\") {\n\t\t\tthis.setState({ isSignedIn: true });\n\t\t}\n\t\tthis.setState({ route: route });\n\t};\n\n\trender() {\n\t\tconst { imageUrl, box, route, isSignedIn } = this.state;\n\t\tconsole.log(\"imageUrl:\", imageUrl);\n\t\tconsole.log(\"box:\", box);\n\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<ParticlesBg color=\"#ffffff\" type=\"cobweb\" bg={true} num={300} />\n\t\t\t\t<Navigation\n\t\t\t\t\tisSignedIn={isSignedIn}\n\t\t\t\t\tonRouteChange={this.onRouteChange}\n\t\t\t\t/>\n\t\t\t\t{route === \"home\" ? (\n\t\t\t\t\t<div>\n\t\t\t\t\t\t<Logo />\n\t\t\t\t\t\t<Rank\n\t\t\t\t\t\t\tname={this.state.user.name}\n\t\t\t\t\t\t\tentries={this.state.user.entries}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<ImageLinkForm\n\t\t\t\t\t\t\tonInputChange={this.onInputChange}\n\t\t\t\t\t\t\tonButtonSubmit={this.onButtonSubmit}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<FaceRecognition imageUrl={imageUrl} box={box} />{\" \"}\n\t\t\t\t\t</div>\n\t\t\t\t) : route === \"signin\" ? (\n\t\t\t\t\t<Signin loadUser={this.loadUser} onRouteChange={this.onRouteChange} />\n\t\t\t\t) : (\n\t\t\t\t\t<Register\n\t\t\t\t\t\tloadUser={this.loadUser}\n\t\t\t\t\t\tonRouteChange={this.onRouteChange}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}