{"ast":null,"code":"var _jsxFileName = \"/Users/nmufti/Desktop/REACT/SmartBrain/src/App.js\";\nimport React, { Component } from \"react\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport Logo from \"./components/Logo/Logo\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\nimport ParticlesBg from \"particles-bg\";\n// import Clarifai from \"clarifai\";\nimport \"./App.css\";\n\n// const app = new Clarifai.App({\n// \tapiKey: \"b2977460c0b442b8a027080ec68659b2\",\n// });\n//* ******************************************************* *//\n// CLARIFY API CALL //\n//* ******************************************************* *//\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, and the URL\n// of the image we want as an input. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst returnClarifaiJSONRequest = imageURL => {\n  // Your PAT (Personal Access Token) can be found in the portal under Authentification\n  const PAT = \"69dad3ab303f4fff82f864adb6a6cf60\";\n  // Specify the correct user_id/app_id pairings\n  // Since you're making inferences outside your app's scope\n  const USER_ID = \"njayem\";\n  const APP_ID = \"SmartBrain\";\n  // Change these to whatever model and image URL you want to use\n  const IMAGE_URL = \"https://samples.clarifai.com/metro-north.jpg\";\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const raw = JSON.stringify({\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID\n    },\n    inputs: [{\n      data: {\n        image: {\n          url: IMAGE_URL\n        }\n      }\n    }]\n  });\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: \"Key \" + PAT\n    },\n    body: raw\n  };\n  return requestOptions;\n};\n//* ******************************************************* *//\n//* ******************************************************* *//\n\nclass App extends Component {\n  //We need to keep track of the input value in the input box\n  //So we need to create a state using constructor\n  constructor() {\n    super();\n    this.displayFaceBox = box => {\n      this.setState({\n        box: box\n      });\n    };\n    // We need to create a function that will listen to the input change\n    // and update the state\n    this.onInputChange = event => {\n      console.log(event.target.value);\n    };\n    this.onButtonSubmit = () => {\n      this.setState({\n        imageURL: this.state.input\n      });\n\n      // NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n      // https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n      // this will default to the latest version_id\n\n      fetch(\"https://api.clarifai.com/v2/models/\" + \"/versions/\" + \"face-detection\" + \"/outputs\", returnClarifaiJSONRequest(this.state.input)).then(response => response.json()).then(response => {\n        console.log(\"hi\", response);\n        if (response) {\n          fetch(\"http://localhost:3000/image\", {\n            method: \"put\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          }).then(response => response.json()).then(count => {\n            this.setState(Object.assign(this.state.user, {\n              entries: count\n            }));\n          });\n        }\n        this.desplayFaceBox(this.calculateFaceLocation(response));\n      }).catch(err => console.log(err));\n    };\n    this.state = {\n      input: \"\",\n      imageURL: \"\"\n    };\n  }\n  render() {\n    const {\n      imageUrl\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(ParticlesBg, {\n        color: \"#ffffff\",\n        type: \"cobweb\",\n        bg: true,\n        num: 300\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 124,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 126,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 127,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onButtonSubmit: this.onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 128,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 132,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 123,\n      columnNumber: 4\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Navigation","Logo","ImageLinkForm","Rank","FaceRecognition","ParticlesBg","jsxDEV","_jsxDEV","returnClarifaiJSONRequest","imageURL","PAT","USER_ID","APP_ID","IMAGE_URL","raw","JSON","stringify","user_app_id","user_id","app_id","inputs","data","image","url","requestOptions","method","headers","Accept","Authorization","body","App","constructor","displayFaceBox","box","setState","onInputChange","event","console","log","target","value","onButtonSubmit","state","input","fetch","then","response","json","id","user","count","Object","assign","entries","desplayFaceBox","calculateFaceLocation","catch","err","render","imageUrl","className","children","color","type","bg","num","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/nmufti/Desktop/REACT/SmartBrain/src/App.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport Logo from \"./components/Logo/Logo\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\nimport ParticlesBg from \"particles-bg\";\n// import Clarifai from \"clarifai\";\nimport \"./App.css\";\n\n// const app = new Clarifai.App({\n// \tapiKey: \"b2977460c0b442b8a027080ec68659b2\",\n// });\n//* ******************************************************* *//\n// CLARIFY API CALL //\n//* ******************************************************* *//\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, and the URL\n// of the image we want as an input. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////\nconst returnClarifaiJSONRequest = (imageURL) => {\n\t// Your PAT (Personal Access Token) can be found in the portal under Authentification\n\tconst PAT = \"69dad3ab303f4fff82f864adb6a6cf60\";\n\t// Specify the correct user_id/app_id pairings\n\t// Since you're making inferences outside your app's scope\n\tconst USER_ID = \"njayem\";\n\tconst APP_ID = \"SmartBrain\";\n\t// Change these to whatever model and image URL you want to use\n\tconst IMAGE_URL = \"https://samples.clarifai.com/metro-north.jpg\";\n\n\t///////////////////////////////////////////////////////////////////////////////////\n\t// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n\t///////////////////////////////////////////////////////////////////////////////////\n\n\tconst raw = JSON.stringify({\n\t\tuser_app_id: {\n\t\t\tuser_id: USER_ID,\n\t\t\tapp_id: APP_ID,\n\t\t},\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tdata: {\n\t\t\t\t\timage: {\n\t\t\t\t\t\turl: IMAGE_URL,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t});\n\n\tconst requestOptions = {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\tAccept: \"application/json\",\n\t\t\tAuthorization: \"Key \" + PAT,\n\t\t},\n\t\tbody: raw,\n\t};\n\treturn requestOptions;\n};\n//* ******************************************************* *//\n//* ******************************************************* *//\n\nclass App extends Component {\n\t//We need to keep track of the input value in the input box\n\t//So we need to create a state using constructor\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tinput: \"\",\n\t\t\timageURL: \"\",\n\t\t};\n\t}\n\n\tdisplayFaceBox = (box) => {\n\t\tthis.setState({ box: box });\n\t};\n\n\t// We need to create a function that will listen to the input change\n\t// and update the state\n\tonInputChange = (event) => {\n\t\tconsole.log(event.target.value);\n\t};\n\n\tonButtonSubmit = () => {\n\t\tthis.setState({ imageURL: this.state.input });\n\n\t\t// NOTE: MODEL_VERSION_ID is optional, you can also call prediction with the MODEL_ID only\n\t\t// https://api.clarifai.com/v2/models/{YOUR_MODEL_ID}/outputs\n\t\t// this will default to the latest version_id\n\n\t\tfetch(\n\t\t\t\"https://api.clarifai.com/v2/models/\" +\n\t\t\t\t\"/versions/\" +\n\t\t\t\t\"face-detection\" +\n\t\t\t\t\"/outputs\",\n\t\t\treturnClarifaiJSONRequest(this.state.input)\n\t\t)\n\t\t\t.then((response) => response.json())\n\t\t\t.then((response) => {\n\t\t\t\tconsole.log(\"hi\", response);\n\t\t\t\tif (response) {\n\t\t\t\t\tfetch(\"http://localhost:3000/image\", {\n\t\t\t\t\t\tmethod: \"put\",\n\t\t\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\tid: this.state.user.id,\n\t\t\t\t\t\t}),\n\t\t\t\t\t})\n\t\t\t\t\t\t.then((response) => response.json())\n\t\t\t\t\t\t.then((count) => {\n\t\t\t\t\t\t\tthis.setState(Object.assign(this.state.user, { entries: count }));\n\t\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tthis.desplayFaceBox(this.calculateFaceLocation(response));\n\t\t\t})\n\t\t\t.catch((err) => console.log(err));\n\t};\n\trender() {\n\t\tconst { imageUrl } = this.state;\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<ParticlesBg color=\"#ffffff\" type=\"cobweb\" bg={true} num={300} />\n\t\t\t\t<Navigation />\n\t\t\t\t<Logo />\n\t\t\t\t<Rank />\n\t\t\t\t<ImageLinkForm\n\t\t\t\t\tonInputChange={this.onInputChange}\n\t\t\t\t\tonButtonSubmit={this.onButtonSubmit}\n\t\t\t\t/>\n\t\t\t\t<FaceRecognition />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}