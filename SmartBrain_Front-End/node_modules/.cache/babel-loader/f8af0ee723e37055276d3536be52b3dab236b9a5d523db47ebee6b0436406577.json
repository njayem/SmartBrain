{"ast":null,"code":"var _jsxFileName = \"/Users/nmufti/Desktop/REACT/SmartBrain/src/App.js\";\nimport React, { Component } from \"react\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport Logo from \"./components/Logo/Logo\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\nimport ParticlesBg from \"particles-bg\";\nimport Clarifai from \"clarifai\";\nimport \"./App.css\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst app = new Clarifai.App({\n  apiKey: \"b2977460c0b442b8a027080ec68659b2\"\n});\n\n//* ******************************************************* *//\n// CLARIFY API CALL //\n//* ******************************************************* *//\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, and the URL\n// of the image we want as an input. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////\nconst returnClarifaiJSONRequest = imageUrl => {\n  // Your PAT (Personal Access Token) can be found in the portal under Authentification\n  const PAT = \"69dad3ab303f4fff82f864adb6a6cf60\";\n  // Specify the correct user_id/app_id pairings\n  // Since you're making inferences outside your app's scope\n  const USER_ID = \"njayem\";\n  const APP_ID = \"SmartBrain\";\n  // Change these to whatever model and image URL you want to use\n  const IMAGE_URL = \"https://samples.clarifai.com/metro-north.jpg\";\n\n  ///////////////////////////////////////////////////////////////////////////////////\n  // YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n  ///////////////////////////////////////////////////////////////////////////////////\n\n  const raw = JSON.stringify({\n    user_app_id: {\n      user_id: USER_ID,\n      app_id: APP_ID\n    },\n    inputs: [{\n      data: {\n        image: {\n          url: IMAGE_URL\n        }\n      }\n    }]\n  });\n  const requestOptions = {\n    method: \"POST\",\n    headers: {\n      Accept: \"application/json\",\n      Authorization: \"Key \" + PAT\n    },\n    body: raw\n  };\n  return requestOptions;\n};\n//* ******************************************************* *//\n//* ******************************************************* *//\n\nclass App extends Component {\n  //We need to keep track of the input value in the input box\n  //So we need to create a state using constructor\n  constructor() {\n    super();\n    this.calculateFaceLocation = data => {\n      const clarifaiFace = data.outputs[0].data.regions[0].region_info.bounding_box;\n      const image = document.getElementById(\"inputimage\");\n      const width = Number(image.width);\n      const height = Number(image.height);\n      // This returns the box dimensions\n      return {\n        leftCol: clarifaiFace.left_col * width,\n        topRow: clarifaiFace.top_row * height,\n        rightCol: width - clarifaiFace.right_col * width,\n        bottomRow: height - clarifaiFace.bottom_row * height\n      };\n    };\n    // This updates the box state\n    this.displayFaceBox = box => {\n      this.setState({\n        box: box\n      });\n    };\n    // We need to create a function that will listen to the input change\n    // and update the state\n    this.onInputChange = event => {\n      this.setState({\n        input: event.target.value\n      });\n    };\n    this.onButtonSubmit = () => {\n      console.log(\"click\");\n      this.setState({\n        imageUrl: this.state.input\n      });\n      console.log(\"the state input is:\", this.state.input);\n      fetch(\"https://api.clarifai.com/v2/models/\" + \"face-detection\" + \"/versions/\" + \"/outputs\", requestClarifyJSONRequest(this.state.input)).then(response => response.json()).then(result => console.log(result)).catch(error => console.log(\"error\", error));\n      app.models.predict(\"face-detection\", this.state.input).then(response => {\n        console.log(\"hi\", response);\n        if (response) {\n          fetch(\"http://localhost:3000/image\", {\n            method: \"put\",\n            headers: {\n              \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify({\n              id: this.state.user.id\n            })\n          }).then(response => response.json());\n          // .then((count) => {\n          // \tthis.setState(Object.assign(this.state.user, { entries: count }));\n          // });\n        }\n\n        this.displayFaceBox(this.calculateFaceLocation(response));\n      }).catch(err => console.log(err));\n    };\n    this.state = {\n      input: \"\",\n      imageUrl: \"\",\n      box: {}\n    };\n  }\n  render() {\n    const {\n      imageUrl,\n      box\n    } = this.state;\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"App\",\n      children: [/*#__PURE__*/_jsxDEV(ParticlesBg, {\n        color: \"#ffffff\",\n        type: \"cobweb\",\n        bg: true,\n        num: 300\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 144,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Navigation, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 145,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Logo, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 146,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(Rank, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(ImageLinkForm, {\n        onInputChange: this.onInputChange,\n        onButtonSubmit: this.onButtonSubmit\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 148,\n        columnNumber: 5\n      }, this), /*#__PURE__*/_jsxDEV(FaceRecognition, {\n        imageUrl: imageUrl,\n        box: box\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 5\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 143,\n      columnNumber: 4\n    }, this);\n  }\n}\nexport default App;","map":{"version":3,"names":["React","Component","Navigation","Logo","ImageLinkForm","Rank","FaceRecognition","ParticlesBg","Clarifai","jsxDEV","_jsxDEV","app","App","apiKey","returnClarifaiJSONRequest","imageUrl","PAT","USER_ID","APP_ID","IMAGE_URL","raw","JSON","stringify","user_app_id","user_id","app_id","inputs","data","image","url","requestOptions","method","headers","Accept","Authorization","body","constructor","calculateFaceLocation","clarifaiFace","outputs","regions","region_info","bounding_box","document","getElementById","width","Number","height","leftCol","left_col","topRow","top_row","rightCol","right_col","bottomRow","bottom_row","displayFaceBox","box","setState","onInputChange","event","input","target","value","onButtonSubmit","console","log","state","fetch","requestClarifyJSONRequest","then","response","json","result","catch","error","models","predict","id","user","err","render","className","children","color","type","bg","num","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["/Users/nmufti/Desktop/REACT/SmartBrain/src/App.js"],"sourcesContent":["import React, { Component } from \"react\";\nimport Navigation from \"./components/Navigation/Navigation\";\nimport Logo from \"./components/Logo/Logo\";\nimport ImageLinkForm from \"./components/ImageLinkForm/ImageLinkForm\";\nimport Rank from \"./components/Rank/Rank\";\nimport FaceRecognition from \"./components/FaceRecognition/FaceRecognition\";\nimport ParticlesBg from \"particles-bg\";\nimport Clarifai from \"clarifai\";\nimport \"./App.css\";\n\nconst app = new Clarifai.App({\n\tapiKey: \"b2977460c0b442b8a027080ec68659b2\",\n});\n\n//* ******************************************************* *//\n// CLARIFY API CALL //\n//* ******************************************************* *//\n///////////////////////////////////////////////////////////////////////////////////////////////////\n// In this section, we set the user authentication, user and app ID, model details, and the URL\n// of the image we want as an input. Change these strings to run your own example.\n//////////////////////////////////////////////////////////////////////////////////////////////////\nconst returnClarifaiJSONRequest = (imageUrl) => {\n\t// Your PAT (Personal Access Token) can be found in the portal under Authentification\n\tconst PAT = \"69dad3ab303f4fff82f864adb6a6cf60\";\n\t// Specify the correct user_id/app_id pairings\n\t// Since you're making inferences outside your app's scope\n\tconst USER_ID = \"njayem\";\n\tconst APP_ID = \"SmartBrain\";\n\t// Change these to whatever model and image URL you want to use\n\tconst IMAGE_URL = \"https://samples.clarifai.com/metro-north.jpg\";\n\n\t///////////////////////////////////////////////////////////////////////////////////\n\t// YOU DO NOT NEED TO CHANGE ANYTHING BELOW THIS LINE TO RUN THIS EXAMPLE\n\t///////////////////////////////////////////////////////////////////////////////////\n\n\tconst raw = JSON.stringify({\n\t\tuser_app_id: {\n\t\t\tuser_id: USER_ID,\n\t\t\tapp_id: APP_ID,\n\t\t},\n\t\tinputs: [\n\t\t\t{\n\t\t\t\tdata: {\n\t\t\t\t\timage: {\n\t\t\t\t\t\turl: IMAGE_URL,\n\t\t\t\t\t},\n\t\t\t\t},\n\t\t\t},\n\t\t],\n\t});\n\n\tconst requestOptions = {\n\t\tmethod: \"POST\",\n\t\theaders: {\n\t\t\tAccept: \"application/json\",\n\t\t\tAuthorization: \"Key \" + PAT,\n\t\t},\n\t\tbody: raw,\n\t};\n\treturn requestOptions;\n};\n//* ******************************************************* *//\n//* ******************************************************* *//\n\nclass App extends Component {\n\t//We need to keep track of the input value in the input box\n\t//So we need to create a state using constructor\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tinput: \"\",\n\t\t\timageUrl: \"\",\n\t\t\tbox: {},\n\t\t};\n\t}\n\n\tcalculateFaceLocation = (data) => {\n\t\tconst clarifaiFace =\n\t\t\tdata.outputs[0].data.regions[0].region_info.bounding_box;\n\t\tconst image = document.getElementById(\"inputimage\");\n\t\tconst width = Number(image.width);\n\t\tconst height = Number(image.height);\n\t\t// This returns the box dimensions\n\t\treturn {\n\t\t\tleftCol: clarifaiFace.left_col * width,\n\t\t\ttopRow: clarifaiFace.top_row * height,\n\t\t\trightCol: width - clarifaiFace.right_col * width,\n\t\t\tbottomRow: height - clarifaiFace.bottom_row * height,\n\t\t};\n\t};\n\n\t// This updates the box state\n\tdisplayFaceBox = (box) => {\n\t\tthis.setState({ box: box });\n\t};\n\n\t// We need to create a function that will listen to the input change\n\t// and update the state\n\tonInputChange = (event) => {\n\t\tthis.setState({ input: event.target.value });\n\t};\n\n\tonButtonSubmit = () => {\n\t\tconsole.log(\"click\");\n\t\tthis.setState({ imageUrl: this.state.input });\n\t\tconsole.log(\"the state input is:\", this.state.input);\n\n\t\tfetch(\n\t\t\t\"https://api.clarifai.com/v2/models/\" +\n\t\t\t\t\"face-detection\" +\n\t\t\t\t\"/versions/\" +\n\t\t\t\t\"/outputs\",\n\t\t\trequestClarifyJSONRequest(this.state.input)\n\t\t)\n\t\t\t.then((response) => response.json())\n\t\t\t.then((result) => console.log(result))\n\t\t\t.catch((error) => console.log(\"error\", error));\n\n\t\tapp.models\n\t\t\t.predict(\"face-detection\", this.state.input)\n\t\t\t.then((response) => {\n\t\t\t\tconsole.log(\"hi\", response);\n\t\t\t\tif (response) {\n\t\t\t\t\tfetch(\"http://localhost:3000/image\", {\n\t\t\t\t\t\tmethod: \"put\",\n\t\t\t\t\t\theaders: { \"Content-Type\": \"application/json\" },\n\t\t\t\t\t\tbody: JSON.stringify({\n\t\t\t\t\t\t\tid: this.state.user.id,\n\t\t\t\t\t\t}),\n\t\t\t\t\t}).then((response) => response.json());\n\t\t\t\t\t// .then((count) => {\n\t\t\t\t\t// \tthis.setState(Object.assign(this.state.user, { entries: count }));\n\t\t\t\t\t// });\n\t\t\t\t}\n\t\t\t\tthis.displayFaceBox(this.calculateFaceLocation(response));\n\t\t\t})\n\t\t\t.catch((err) => console.log(err));\n\t};\n\n\trender() {\n\t\tconst { imageUrl, box } = this.state;\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<ParticlesBg color=\"#ffffff\" type=\"cobweb\" bg={true} num={300} />\n\t\t\t\t<Navigation />\n\t\t\t\t<Logo />\n\t\t\t\t<Rank />\n\t\t\t\t<ImageLinkForm\n\t\t\t\t\tonInputChange={this.onInputChange}\n\t\t\t\t\tonButtonSubmit={this.onButtonSubmit}\n\t\t\t\t/>\n\t\t\t\t<FaceRecognition imageUrl={imageUrl} box={box} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}